/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/_index'
import { Route as IndexIndexImport } from './routes/_index/index'
import { Route as IndexSplatImport } from './routes/_index/$'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/_index',
  getParentRoute: () => rootRoute,
} as any)

const IndexIndexRoute = IndexIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => IndexRoute,
} as any)

const IndexSplatRoute = IndexSplatImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => IndexRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_index': {
      id: '/_index'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_index/$': {
      id: '/_index/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof IndexSplatImport
      parentRoute: typeof IndexImport
    }
    '/_index/': {
      id: '/_index/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexIndexImport
      parentRoute: typeof IndexImport
    }
  }
}

// Create and export the route tree

interface IndexRouteChildren {
  IndexSplatRoute: typeof IndexSplatRoute
  IndexIndexRoute: typeof IndexIndexRoute
}

const IndexRouteChildren: IndexRouteChildren = {
  IndexSplatRoute: IndexSplatRoute,
  IndexIndexRoute: IndexIndexRoute,
}

const IndexRouteWithChildren = IndexRoute._addFileChildren(IndexRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof IndexRouteWithChildren
  '/$': typeof IndexSplatRoute
  '/': typeof IndexIndexRoute
}

export interface FileRoutesByTo {
  '/$': typeof IndexSplatRoute
  '/': typeof IndexIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_index': typeof IndexRouteWithChildren
  '/_index/$': typeof IndexSplatRoute
  '/_index/': typeof IndexIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/$' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/$' | '/'
  id: '__root__' | '/_index' | '/_index/$' | '/_index/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_index"
      ]
    },
    "/_index": {
      "filePath": "_index.tsx",
      "children": [
        "/_index/$",
        "/_index/"
      ]
    },
    "/_index/$": {
      "filePath": "_index/$.tsx",
      "parent": "/_index"
    },
    "/_index/": {
      "filePath": "_index/index.tsx",
      "parent": "/_index"
    }
  }
}
ROUTE_MANIFEST_END */
